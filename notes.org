
@TODO: directX since AMD is abandoning opengl 

@TODO: really good visualizations to help students.
- logging can help
- viewing memory contents of an arena
- I like this assignment to: visualize what the computer is doing. Describe what it's doing (I often anthropomorphize the computer and say things like "give me the data to send to the GPU"). Could be a good assignment for first semester students.
- the basics are easy, but what's the trick stuff? I want to show every time a variable changed in a frame, and what line of code changed that variable. (this is a constant headache for students: once they realize that the result they're seeing is because of a state change, they still have to understand why that state change occurred)
- linking variables to output. Hover over position to see where that position is being used. Hover over character to see what is supplying that position (it gets tricky tho because what if there isnt a direct connection, like the positions were put in a buffer passed to renderer. That position isnt really on the characater data then).
- changing data at runtime is cool, but very often data is meant to be changed thru a process, so just changing the state isnt helpful, and even confusing. 
- in some ways I think it'd be nice to break up rendering and exectution, like breaking execution, running the Move() function, and actually seeing the character on screen change. But that is kinda a false representation isnt it, because the rendering is done in one pass. Altho if we had a by-line pause instead of a frame pause we could say "run code up til this point" and render, and step to the next frame and render. That feels really confusing to me tho, even tho a student might find it helpful, it kinda tells a lie. Like we update the render without running the physics, even tho it's {Input Update Render}. Maybe if we could do it by rendering points or something, to distinguish between the "data" state and the visual state. We could also say something like "Frame N, function ___ line n"
- If I can even implement this it is going to obfuscate a lot of the code, or at least complicate matters by adding a layer. 
- memory dumps, rewinds, save states, like an emulator
- visualization of functions over time and projection ("show me what where this point will be N seconds from now assuming it continues as is").


@TODO: rendering API
- want to pass in an arbitrary number of uniforms (very common I have two things which are RenderQuad, but one of the shaders takes time, or a normal map, or something like that). Dont want to require writing new API calls for new shaders
- similarly I want it to be easy to append textures. 
- We could do this as a "setup". Bind shader, give it a mesh, set uniforms, then Draw (which handles vertex attribs and the actual draw call). 
- look at SDL to see what they do.  
- lets say I want to implement wrapping: how could I do that without resorting to raw gl calls?

The bare minimum engine
- SDL and other APIs give you a lot of features, but it can be hard to determine which ones are essential to getting a game running, and which ones you even need. The more code you have the more you have to support. 
- What do I consider the bare minimum? Some of these things are niceties (debug log, debug drawing, asset system). 


@TODO: have to get a scrollable debug log implemented, I think it's just too powerful and useful for beginners to omit, even tho it kinda breaks the whole bare-bones approach. 

TODO: be able to get the camera dimensions easily


TODO: Mosaic examples. 
-- the less code you see the clearer things are.
-- need to be able to set the grid size 
-- I dont like that its a mirror of the general game engine architecture. 


TODO: config file for window dimensions, volume

BUG: fix RectTest!!!
-- isnt this done already?

TODO: networking needs to be able to run multiple instances of the game on the same machine. You should be able to host the server and N clients on the same machine. 
-- only issue there is that the clients each need a unique port that we send to?
-- Need to get this in one instance of the game.

BUG: screen text doesnt work at all!!! Not really sure why, at sizes bigger than 32 we stop seeing it. I think its got something to do with calculating the model position. 
Its also really annoying that we dont have an emsize or anything, so our sizes are totally random.

TODO over summer:
networking
-- encryption, compression. voice codec?
UI
DebugDrawing
Logging (both to file and to screen)


Radically simplify and remove a lot of unused code. I just want a really simple 2D engine students can use. I bet 12 API calls is the sweetspot.

Implement basic UI:
buttons (with string and with png)
input string
input handles
Scroll regions
DebugDrawLine/Circle/Rect


Sprites (access the pixel and then set the colors)
Animations

Create a simple menu

Create sprites

Create a scene architecture for moving between different types of games.

A good exercise for the Engine class would be to see something like how to load OpenGL shaders, and then have to improve on it. For instance, storing the uniform and attribute locations.


Get the tile to move and go up or down everytime it hits the edge.


"Then comes the hard part: what is worth doing?"
I love you Brian Moriarty

Something I love about his style is making metaphors/allegories to a lot of different fields: 
Music
Sports
Games
Movies
Writing


My question is: is this a useful way to learn how to program and do game design? 



Games are:
input data
operations on that data
output data


Overload V4() so we don't get those obnoxious errors when not everything is a floating point. 


Write a clear API and documentation. 

DynamicArray is probably necessary, especially for tiles 

Clearly separate things because it's very easy to mess up by moving the grid rendering code, or checking for input in the wrong place, etc. Especially so they can easily create a new game by copy-pasting the directory and not needing to easily segmenting their code from the other stuff. Like we could have 
Tile {
   basic;
   custom;
};

Possible to teach math stuff with this? 


Oh this could be really cool for Gray Matter!


DESIGN: 
I think we need the tiles to record some time information: last time changed position

If you change the grid size do we delete tiles out of bounds? 

GlobalVars file Thekla style? Could move things like screen/board/line color in there, but that isn't really a huge barrier to entry...
        
Things like repeat key rate might be something we want internal...

I'd rather not pass in input to InputPressed

Do we do thins GOL style and say each tile is just on or off, there is no such thing as deletion or moving? That seems counterintuitive for a lot of games (moving a pawn is actually turning this thing to nothing and this tile to a pawn)

I kinda like the animation system used in GOL, might be nice to implement that here. This depends on whether tiles/cells have positions, or are simply coordinates in space

Wow this is a lot like Changes...


TODO: 
audio
Font rendering
custom sprites on a tile? Kinda flies in the face of the idea but Perlenspiel has it...
path finding?
Saving/loading games state?
Animations (like start lerping between these colors or something?)
Debug log (kinda weird to implement a sophisticated text rendering system in something that doesn't let you do anything more advanced than a line at the top...)



TODO: figure out whats up with glTexParameter and why its necessary
      Frame buffers

We should have a text region on the right, and the graph on the left, when you select certain things it'll pop up some text on the right.


I want to start drawing passing in colors so we'll build up buffers, copy the data, and then draw with color as a vertex attrib


Create a library for interactive math experiments

Needs to require very little programming knowledge (but could be good testing ground for basic logic/control flow)

Puzzle game: could be make the dot product < 0. Make it 0, etc. Make this face a diffrent way from this object (using dot product). 
Move vectors into different spaces, like transforming the direction into normalized space. 
Is this thing's coordinates in world or local space? 

Set t value so the point reaches the destination. Write a calculation for t so that it arrives in 2 seconds
Change the values of the easing function so the curves match


Lerp
Rotations
Easing functions
Dot product
Cross Product
Quaternions
Geometry

Importantly need to be able to solve equations like "I want this to arrive in n seconds, how do I do that" or "it moves this fast, what time will it arrive"
  Basic algebraic equations like that



Perlenspiel Thoughts
I don't like how data is associated with tiles. That leads to a weird thing where the tiles have associated data but they dont move, so you move data from one tile to another. I much prefer the idea that the data is the data and you just access it however you want and use the tiles as rendering.

Sprites: I don't like how sprites can occupy one tile because it kinda lies about what's going on. On the other hand my approach makes doing any grid-based thing with sprites painful because the student has to make their own grid.

* Normalized or Pixels
  We pretty much always calculate the pixels as ratios of the dimensions anyway so it just makes sense to convert to normalized every where.
  
* Principles
  A guiding design is that it should be sophisticated enough to do the bare minimum reasonably well. 
  Simple enough to easily modify. 
  Bare enough to prompt questions, "what if I want to do X".
  -- give examples of this.
  Straightforward enough that you can walk the callstack and see where things are happening. That's one reason its single-threaded
  Dont hide details. That's why there isnt just a "physics tick". I want students to think about what happens when.
  
  To a degree limitations help you create, but I think it has more to do with specifications. Being familiar with the details and the intracacies of an implementation.
  A limitation is "only make a game with boxes" which isnt necessarily fruitful. But understanding boxes, the type of operations you can use them for lets you do a lot of things. It makes you think of the properties of your tools and how they can be used in interesting ways. The limitations can push you towards familiarity, and that's the goal.
* Ergonomics
  Passing in Input, audioPlayer, etc is really annoying. 

  Text printing:
  - the names are annoying. Printing to screen in pixels should be favored I think. Not ScreenPixels
  - Mosaic should have a nice way to splat text on the screen line after line without you thinking about it. 
  - dedicated region of screen for text.
  - offset grid so we can put text on the left side. 
  - text on a row of the grid.
  - text and textf
  - sprintf
  - unicode
  - REALLY NEED TO FIGURE OUT EMSIZE STUFF. We cant actually draw text at a reasonable size. Saying 64 pixels doesnt mean anything

